package{		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.utils.getDefinitionByName;	import flash.utils.getQualifiedClassName;		import fl.controls.Button;	import fl.controls.List;	import fl.controls.RadioButton;		import com.altoinu.flash.customcomponents.drawingboard.DrawingBoard;	import com.altoinu.flash.customcomponents.drawingboard.DrawingLayer;	import com.altoinu.flash.customcomponents.drawingboard.IDrawingLayer;	import com.altoinu.flash.customcomponents.drawingboard.imageEditTools.DrawingTool;	import com.altoinu.flash.customcomponents.drawingboard.imageEditTools.EraserTool;		/**	 * Example on how to use com.altoinu.flash.customcomponents.drawingboard package.	 */	public class DrawingBoard_Sample extends MovieClip	{				public var button_Tollman:MovieClip;		public var button_Nick:MovieClip;		public var button_Jon:MovieClip;		public var button_Eraser:MovieClip;		public var list_Layers:List;		public var option_Select:RadioButton;		public var option_Draw:RadioButton;		public var button_AddLayer:Button;		public var button_DeleteLayer:Button;		public var button_MoveLayerUp:Button;		public var button_MoveLayerDown:Button;		public var drawingArea:DrawingBoard;		public var drawMouseArea:MovieClip;								/**		 * Tool currently selected.		 */		private var _currentSelectedDrawingTool:*;				/**		 * Constructor.		 */		public function DrawingBoard_Sample():void		{						super();						var drawingLayers:Vector.<IDrawingLayer> = drawingArea.drawingLayers;			var numLayers:int = drawingLayers.length;			if (numLayers == 0)			{								// add at least one drawing layer				addNewLayer("Layer "+(list_Layers.dataProvider.length + 1));							}			else			{								// Display layers in the layer list				for (var i:int = 0; i < numLayers; i++)				{										list_Layers.dataProvider.addItem({label: "Layer "+(list_Layers.dataProvider.length + 1), targetLayer: drawingLayers[i]});									}							}						list_Layers.addEventListener(Event.CHANGE, onListSelectionChange);						// Brush choose button			button_Tollman.buttonMode = true;			button_Tollman.useHandCursor = true;			button_Tollman.addEventListener(MouseEvent.CLICK, chooseBrush);			button_Nick.buttonMode = true;			button_Nick.useHandCursor = true;			button_Nick.addEventListener(MouseEvent.CLICK, chooseBrush);			button_Jon.buttonMode = true;			button_Jon.useHandCursor = true;			button_Jon.addEventListener(MouseEvent.CLICK, chooseBrush);						// Eraser button			button_Eraser.buttonMode = true;			button_Eraser.useHandCursor = true;			button_Eraser.addEventListener(MouseEvent.CLICK, chooseEraser);						// Add layer			button_AddLayer.addEventListener(MouseEvent.CLICK, onAddLayerClick);						// Delete layer button			button_DeleteLayer.addEventListener(MouseEvent.CLICK, onDeleteLayerClick);						// Move layer up/down			button_MoveLayerUp.addEventListener(MouseEvent.CLICK, onMoveLayerClick);			button_MoveLayerDown.addEventListener(MouseEvent.CLICK, onMoveLayerClick);						// Mouse mode selection			option_Select.addEventListener(MouseEvent.CLICK, onMouseModeClick);			option_Draw.addEventListener(MouseEvent.CLICK, onMouseModeClick);						// Watch mouse cursor movement on the drawing board			drawMouseArea.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMoveOverDrawingArea);					}				private function chooseBrush(event:MouseEvent):void		{						// Set brush image			var brushChoice:* = getDefinitionByName(getQualifiedClassName(event.target))			_currentSelectedDrawingTool = new DrawingTool(brushChoice);			_currentSelectedDrawingTool.bitmapMode = true;						// Set the size of the brush			_currentSelectedDrawingTool.scaleX = 0.5;			_currentSelectedDrawingTool.scaleY = 0.5;					}				private function chooseEraser(event:MouseEvent):void		{						_currentSelectedDrawingTool = new EraserTool(EraserBrush);			_currentSelectedDrawingTool.width = 20;			_currentSelectedDrawingTool.height = 20;					}				private function onDeleteLayerClick(event:MouseEvent):void		{						if (list_Layers.selectedIndex >= 0)				deleteLayer(list_Layers.selectedIndex);					}				private function onAddLayerClick(event:MouseEvent):void		{						drawingArea.selectedLayer = addNewLayer("Layer "+(list_Layers.dataProvider.length + 1));					}				/**		 * Adds new layer to the drawing board.		 *		 * @param layerName		 * @param addIndex		 */		private function addNewLayer(layerName:String, addIndex:int = 0):IDrawingLayer		{						// Creates and adds new layer to the drawing board			var newLayer:IDrawingLayer = drawingArea.addLayer(new DrawingLayer());			newLayer.name = layerName;						// and remember reference to it in the list			list_Layers.dataProvider.addItemAt({label: layerName, targetLayer: newLayer}, addIndex);						return newLayer;					}				/**		 * Removes selected layer.		 *		 * @param selectedLayerIndex		 */		private function deleteLayer(selectedLayerIndex:int):IDrawingLayer		{						// Remove layer			var removeTarget:Object = list_Layers.dataProvider.getItemAt(selectedLayerIndex);			var removedLayer:IDrawingLayer = drawingArea.removeLayer(removeTarget.targetLayer);						// and it's reference in the list			list_Layers.dataProvider.removeItemAt(selectedLayerIndex);						list_Layers.selectedIndex = -1;			drawingArea.selectedLayer = null;						return removedLayer;					}				/**		 * Move layer up/down button handler.		 */		private function onMoveLayerClick(event:MouseEvent):void		{						if (list_Layers.selectedIndex != -1)			{								var newLayerIndex:int;				if (event.target == button_MoveLayerUp)					newLayerIndex = drawingArea.selectedLayerIndex + 1; // Move layer up				else if (event.target == button_MoveLayerDown)					newLayerIndex = drawingArea.selectedLayerIndex - 1; // Move layer down								if ((0 <= newLayerIndex) &&					(newLayerIndex < drawingArea.getDrawingLayers().length))				{										// Rearrange layer list					var currentLayerListIndex:int = list_Layers.dataProvider.getItemIndex(list_Layers.selectedItem);					var removedItem:Object;					if (event.target == button_MoveLayerUp)					{												// Layer moved up, so move list item up						list_Layers.dataProvider.addItemAt(list_Layers.dataProvider.removeItem(list_Layers.selectedItem), currentLayerListIndex - 1);						list_Layers.selectedIndex = currentLayerListIndex - 1;											}					else					{												// Layer moved down, so move list item down						list_Layers.dataProvider.addItemAt(list_Layers.dataProvider.removeItem(list_Layers.selectedItem), currentLayerListIndex + 1);						list_Layers.selectedIndex = currentLayerListIndex + 1;											}										// Move layer to new index					drawingArea.addLayerAt(drawingArea.selectedLayer, newLayerIndex)									}							}					}				/**		 * Mouse mode selection.		 */		private function onMouseModeClick(event:MouseEvent):void		{						if ((event.target == option_Select) && (event.target.selected))			{								// Selection mode				drawMouseArea.visible = false;				drawingArea.selectMode = true;							}			else if ((event.target == option_Draw) && (event.target.selected))			{								// Draw mode				drawMouseArea.visible = true;				drawingArea.selectMode = false;							}					}				private function onListSelectionChange(event:Event):void		{						drawingArea.selectedLayer = list_Layers.selectedItem.targetLayer;					}				/**		 * Mouse move handler on the drawing board.		 */		private function onMouseMoveOverDrawingArea(event:MouseEvent):void		{						if ((event.buttonDown) && (_currentSelectedDrawingTool != null) && (list_Layers.selectedIndex != -1))			{								// X Y coordinate				var drawX:Number =  event.stageX - event.target.x - (_currentSelectedDrawingTool.width / 2);				var drawY:Number =  event.stageY - event.target.y - (_currentSelectedDrawingTool.height / 2);								if (_currentSelectedDrawingTool is DrawingTool)				{										// Place image at mouse position					var newImageOnBoard:DisplayObject = _currentSelectedDrawingTool.drawImage(drawingArea.selectedLayer, drawX, drawY);									}				else if (_currentSelectedDrawingTool is EraserTool)				{										// Erase image at mouse position					_currentSelectedDrawingTool.eraseImage(drawingArea.selectedLayer, drawX, drawY);									}							}					}			}	}